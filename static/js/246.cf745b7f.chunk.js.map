{"version":3,"file":"static/js/246.cf745b7f.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.Styled.js","components/MovieList/MovieList.jsx","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.jsx","components/Button/Button.styled.js","components/Button/Button.jsx","components/Loader/Loader.jsx","pages/movies/Movies.jsx","services/fetch.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 25px;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n`;\n\nexport const Item = styled.li`\n  max-width: 200px;\n  height: 310px;\n  padding: 10px;\n  background-color: lightgrey;\n  border-radius: 3px;\n  overflow-wrap: break-word;\n\n  &:hover {\n    transform: scale(1.04);\n  }\n\n  h3 {\n    margin-top: 10px;\n    margin-bottom: 0;\n    color: black;\n\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { List, Item } from './MovieList.Styled';\nimport image from 'img/no-image.jpg';\n\nexport const MovieList = ({ movies, url }) => {\n  const location = useLocation();\n\n  console.log(url);\n  return (\n    <List>\n      {movies.map((movie, index) => (\n        <Link to={`${url}${movie.id}`} key={index} state={{ from: location }}>\n          <Item>\n            <div>\n              {movie.poster_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\n                  alt=\"movie.title\"\n                  width={180}\n                  height={250}\n                />\n              ) : (\n                <img src={image} alt={movie.title} width={180} height={250} />\n              )}\n              <div>\n                <h3>{movie.title}</h3>\n              </div>\n            </div>\n          </Item>\n        </Link>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object),\n  url: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const Div = styled.header`\n  padding-left: 40px;\n\n  color: #fff;\n`;\n\n/*\n * Стили компонента SearchForm\n */\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 300px;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  border: 1px solid grey;\n`;\n\nexport const SearchButton = styled.button`\n  padding: 5px;\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  &:hover {\n    opacity: 1;\n  }\n`;\n\nexport const SearchButtonLabel = styled.span`\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n`;\n\nexport const Input = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import { useState } from 'react';\nimport { BsSearch } from 'react-icons/bs';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport {\n  Div,\n  Form,\n  SearchButton,\n  SearchButtonLabel,\n  Input,\n} from './Searchbar.styled';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [text, setText] = useState('');\n\n  //   Метод для записування даних в стейт при введенны в input\n  const handleChange = event => {\n    // console.log(event.currentTarget.value);\n    // Перезаписуємо в стейт text\n    setText(event.currentTarget.value);\n  };\n\n  //   Метод сабміну форми.\n  const handleSubmit = event => {\n    event.preventDefault();\n    // Перевіряємо, чи по сабміту в форму щось введено\n    if (text === '') {\n      toast.error('You need to enter something');\n      return;\n    }\n    // Предаємо новий text в App через функцію onSubmit (вона передана пропом onSubmit={changeText} )\n    onSubmit(text);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setText('');\n  };\n\n  return (\n    <Div>\n      <Form onSubmit={handleSubmit}>\n        <Input\n          className=\"input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies\"\n          name=\"text\"\n          value={text}\n          onChange={handleChange}\n        />\n\n        <SearchButton type=\"submit\">\n          <SearchButtonLabel>\n            <BsSearch />\n          </SearchButtonLabel>\n        </SearchButton>\n      </Form>\n    </Div>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const LoadMoreBtn = styled.button`\n  padding: 8px 16px;\n  margin-left: auto;\n  margin-right: auto;\n  border-radius: 2px;\n  background-color: #3f51b5;\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #fff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  max-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  &:hover,\n  &:focus {\n    background-color: #303f9f;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { LoadMoreBtn } from './Button.styled';\n\nexport const Button = ({ onLoadMore }) => {\n  return (\n    <LoadMoreBtn type=\"button\" onClick={() => onLoadMore()}>\n      Load more\n    </LoadMoreBtn>\n  );\n};\n\nButton.propTypes = {\n  onLoadMore: PropTypes.func.isRequired,\n};\n","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { Button } from 'components/Button/Button';\nimport { Loader } from 'components/Loader/Loader';\nimport { getMovies } from 'services/fetch';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nconst MoviesPage = () => {\n  const [inputValue, setInputValue] = useSearchParams('');\n  const [searchMovies, setSearchMovies] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [loading, setLoading] = useState(false);\n  // 2. Зчитуємо з QueryString значення параметра query і записуємо в searchValue, а якщо нема нічого, то ''\n  const searchValue = inputValue.get('query') ?? '';\n\n  // 1. Записуємо введений в форму текст в QueryString\n  const updateQueryString = text => {\n    // Щоб в QueryString при пустому text не вписувалось 'query='\n    const nextParams = text !== '' ? { query: text } : {};\n    setInputValue(nextParams);\n    setCurrentPage(1);\n  };\n\n  useEffect(() => {\n    if (searchValue === '') {\n      return;\n    }\n\n    if (currentPage === 1) {\n      setLoading(true);\n      getMovies(searchValue.trim(), currentPage)\n        .then(data => {\n          setSearchMovies(data.results);\n          setTotalPages(data.total_pages);\n        })\n        .then(setLoading(false));\n    }\n  }, [currentPage, searchValue, totalPages]);\n\n  const loadMore = () => {\n    getMovies(searchValue.trim(), currentPage + 1).then(data => {\n      setSearchMovies(prevState => [...prevState, ...data.results]);\n      setCurrentPage(prevPage => prevPage + 1);\n    });\n  };\n\n  return (\n    <main>\n      <Searchbar onSubmit={updateQueryString} placeholder={searchValue} />\n      {loading && <Loader />}\n      {searchMovies !== '' && <MovieList movies={searchMovies} url={''} />}\n      {totalPages !== currentPage && <Button onLoadMore={loadMore} />}\n    </main>\n  );\n};\nexport default MoviesPage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '4d2e80e66c2c2de6980779cd2eee193d';\n\nasync function getTrendingMovies() {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}/trending/movie/day?api_key=${KEY}`\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getMovies(text, page) {\n  try {\n    const response = await axios.get(`${BASE_URL}search/movie`, {\n      params: {\n        api_key: `${KEY}`,\n        query: `${text}`,\n        page: `${page}`,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getMovieById(id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}?api_key=${KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getCastById(id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nasync function getReviewsById(id) {\n  try {\n    const response = await axios.get(\n      `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport {\n  getTrendingMovies,\n  getMovies,\n  getMovieById,\n  getCastById,\n  getReviewsById,\n};\n"],"names":["List","styled","Item","MovieList","movies","url","location","useLocation","console","log","map","movie","index","to","id","state","from","poster_path","src","alt","width","height","image","title","Div","Form","SearchButton","SearchButtonLabel","Input","Searchbar","onSubmit","useState","text","setText","resetForm","event","preventDefault","toast","className","type","autoComplete","autoFocus","placeholder","name","value","onChange","currentTarget","LoadMoreBtn","Button","onLoadMore","onClick","Loader","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","useSearchParams","inputValue","setInputValue","searchMovies","setSearchMovies","currentPage","setCurrentPage","totalPages","setTotalPages","loading","setLoading","searchValue","get","useEffect","getMovies","trim","then","data","results","total_pages","query","prevState","prevPage","BASE_URL","KEY","getTrendingMovies","axios","response","error","page","params","api_key","getMovieById","getCastById","getReviewsById"],"sourceRoot":""}